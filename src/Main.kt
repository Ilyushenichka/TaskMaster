
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.DateTimeParseException
import java.util.Locale
import kotlin.random.Random


data class Task(
    val id: Int,
    var title: String,
    var description: String,
    var priority: String,
    var dueDate: String,
    var isCompleted: Boolean,
    var category: String,
    val createdAt: String
)

val priorityOptions: List<String> = listOf("–ù–∏–∑–∫–∏–π üîµ", "–°—Ä–µ–¥–Ω–∏–π üü°", "–í—ã—Å–æ–∫–∏–π üü†", "–°—Ä–æ—á–Ω—ã–π üî¥")
val defaultCategories: List<String> = listOf("–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–£—á–µ–±–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–§–∏–Ω–∞–Ω—Å—ã")

val categories: MutableList<String> = defaultCategories.toMutableList()
val tasks: MutableList<Task> = mutableListOf()
var idCounter: Int = 1000
val dateFormatter: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")

const val COLOR_RESET = "\u001B[0m"
const val COLOR_RED = "\u001B[31m"
const val COLOR_GREEN = "\u001B[32m"
const val COLOR_YELLOW = "\u001B[33m"
const val COLOR_BLUE = "\u001B[34m"
const val COLOR_CYAN = "\u001B[36m"

fun prompt(text: String): String {
    print(text)
    return readLine()?.trim() ?: ""
}

fun pressEnterToContinue() {
    println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    readLine()
}

fun parseDateOrNull(input: String): LocalDate? = try {
    LocalDate.parse(input, dateFormatter)
} catch (e: DateTimeParseException) {
    null
}

fun today(): String = LocalDate.now().format(dateFormatter)

fun generateId(): Int {
    idCounter += 1
    return idCounter
}

fun readIntInRange(promptText: String, range: IntRange, allowEmpty: Boolean = false): Int? {
    while (true) {
        val raw = prompt(promptText)
        if (allowEmpty && raw.isEmpty()) return null
        val number = raw.toIntOrNull()
        if (number != null && number in range) return number
        println("${COLOR_RED}–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${range.first}-${range.last}${COLOR_RESET}")
    }
}

fun chooseFromList(title: String, options: List<String>, allowEmpty: Boolean = false): String? {
    println(title)
    options.forEachIndexed { index, value -> println("${index + 1}. $value") }
    val selection = readIntInRange("–í–∞—à –≤—ã–±–æ—Ä (1-${options.size})${if (allowEmpty) " –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞" else ""}: ", 1..options.size, allowEmpty)
    return if (selection == null) null else options[selection - 1]
}

fun colorForPriority(priority: String): String = when {
    priority.contains("üî¥") -> COLOR_RED
    priority.contains("üü†") -> COLOR_YELLOW
    priority.contains("üü°") -> COLOR_YELLOW
    priority.contains("üîµ") -> COLOR_BLUE
    else -> COLOR_RESET
}

fun statusEmoji(done: Boolean): String = if (done) "‚úÖ" else "‚è≥"

fun overdue(task: Task): Boolean {
    val due = parseDateOrNull(task.dueDate) ?: return false
    val now = LocalDate.now()
    return !task.isCompleted && due.isBefore(now)
}

fun printTask(task: Task, index: Int? = null) {
    val idx = index?.let { "$it. " } ?: ""
    val priColor = colorForPriority(task.priority)
    val overdueMark = if (overdue(task)) " ${COLOR_RED}–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞${COLOR_RESET}" else ""
    println("$idx=== ${COLOR_CYAN}–ó–ê–î–ê–ß–ê${COLOR_RESET} ===")
    println("${statusEmoji(task.isCompleted)} ${if (overdue(task)) "üî¥" else "üü†"} [${task.id}] ${task.title}")
    if (task.description.isNotBlank()) println("üìÑ ${task.description}")
    println("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${task.category}")
    println("üìÖ –°–æ–∑–¥–∞–Ω–∞: ${task.createdAt} | –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: ${task.dueDate}$overdueMark")
    println("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priColor}${task.priority}${COLOR_RESET}")
    println("--------------------------------------------")
}

fun printHeader(title: String) {
    println("\n=================================================")
    println("$title")
    println("=================================================")
}

fun createTaskInteractive() {
    printHeader("=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –ó–ê–î–ê–ß–ò ===")
    val title = generateSequence {
        val t = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
        if (t.isBlank()) {
            println("${COLOR_RED}–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º${COLOR_RESET}")
            null
        } else t
    }.first()

    val description = prompt("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
    val chosenPriority = chooseFromList("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", priorityOptions)!!

    println("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    categories.forEachIndexed { i, c -> println("${i + 1}. $c") }
    println("${categories.size + 1}. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    val catChoice = readIntInRange("–í–∞—à –≤—ã–±–æ—Ä (1-${categories.size + 1}): ", 1..(categories.size + 1))!!
    val category = if (catChoice == categories.size + 1) {
        generateSequence {
            val c = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
            if (c.isBlank()) {
                println("${COLOR_RED}–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π${COLOR_RESET}")
                null
            } else c
        }.first().also { if (!categories.contains(it)) categories.add(it) }
    } else categories[catChoice - 1]

    val dueDate = generateSequence {
        val input = prompt("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ Enter –¥–ª—è —Å–µ–≥–æ–¥–Ω—è): ")
        val value = if (input.isBlank()) today() else input
        if (parseDateOrNull(value) == null) {
            println("${COLOR_RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã${COLOR_RESET}")
            null
        } else value
    }.first()

    val now = today()
    val id = generateId()
    tasks.add(
        Task(
            id = id,
            title = title,
            description = description,
            priority = chosenPriority,
            dueDate = dueDate,
            isCompleted = false,
            category = category,
            createdAt = now
        )
    )
    println("${COLOR_GREEN}‚úÖ –ó–∞–¥–∞—á–∞ '$title' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: $id${COLOR_RESET}")
}

fun listTasksInteractive() {
    if (tasks.isEmpty()) {
        println("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        return
    }
    println("\n–§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞:")
    println("1. –í—Å–µ  2. –ê–∫—Ç–∏–≤–Ω—ã–µ  3. –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
    val option = readIntInRange("–í–∞—à –≤—ã–±–æ—Ä (1-3) –∏–ª–∏ Enter –¥–ª—è '–í—Å–µ': ", 1..3, allowEmpty = true) ?: 1
    val filtered = when (option) {
        2 -> tasks.filter { !it.isCompleted }
        3 -> tasks.filter { it.isCompleted }
        else -> tasks
    }
    if (filtered.isEmpty()) {
        println("üì≠ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É")
        return
    }

    val grouped = filtered.groupBy { it.category }
    var idx = 1
    grouped.toSortedMap(String.CASE_INSENSITIVE_ORDER).forEach { (cat, list) ->
        println("\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat} (${list.size})")
        println("--------------------------------------------")
        list.sortedWith(compareBy<Task> { it.isCompleted }.thenBy { it.title.lowercase(Locale.getDefault()) })
            .forEach { task ->
                printTask(task, idx)
                idx += 1
            }
    }
}

fun findTaskByIdInteractive(): Task? {
    val id = prompt("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ").toIntOrNull()
    if (id == null) {
        println("${COLOR_RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID${COLOR_RESET}")
        return null
    }
    val task = tasks.find { it.id == id }
    if (task == null) println("${COLOR_RED}–ó–∞–¥–∞—á–∞ —Å ID $id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${COLOR_RESET}")
    return task
}

fun markCompletedInteractive() {
    val task = findTaskByIdInteractive() ?: return
    if (task.isCompleted) {
        println("${COLOR_YELLOW}–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π${COLOR_RESET}")
        return
    }
    task.isCompleted = true
    println("${COLOR_GREEN}‚úÖ –ó–∞–¥–∞—á–∞ '${task.title}' –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π${COLOR_RESET}")
}

fun editTaskInteractive() {
    val task = findTaskByIdInteractive() ?: return
    if (task.isCompleted) {
        println("${COLOR_RED}–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É${COLOR_RESET}")
        return
    }

    println("–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    val newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ [${task.title}]: ")
    if (newTitle.isNotBlank()) task.title = newTitle else if (task.title.isBlank()) {
        println("${COLOR_RED}–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º${COLOR_RESET}"); return
    }

    val newDesc = prompt("–û–ø–∏—Å–∞–Ω–∏–µ [${if (task.description.isBlank()) "-" else task.description}]: ")
    if (newDesc.isNotBlank()) task.description = newDesc

    val pri = chooseFromList("–ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Ç–µ–∫—É—â–∏–π: ${task.priority}) –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:", priorityOptions, allowEmpty = true)
    if (pri != null) task.priority = pri

    println("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–∫—É—â–∞—è: ${task.category}):")
    categories.forEachIndexed { i, c -> println("${i + 1}. $c") }
    println("${categories.size + 1}. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    val catIdx = readIntInRange("–í–∞—à –≤—ã–±–æ—Ä (1-${categories.size + 1}) –∏–ª–∏ Enter: ", 1..(categories.size + 1), allowEmpty = true)
    if (catIdx != null) {
        val newCat = if (catIdx == categories.size + 1) {
            val c = generateSequence {
                val v = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
                if (v.isBlank()) null else v
            }.first()
            if (!categories.contains(c)) categories.add(c)
            c
        } else categories[catIdx - 1]
        task.category = newCat
    }

    val newDueRaw = prompt("–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è [${task.dueDate}] (–¥–¥.–º–º.–≥–≥–≥–≥) –∏–ª–∏ Enter: ")
    if (newDueRaw.isNotBlank()) {
        if (parseDateOrNull(newDueRaw) == null) {
            println("${COLOR_RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã${COLOR_RESET}")
        } else task.dueDate = newDueRaw
    }

    println("${COLOR_GREEN}–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã${COLOR_RESET}")
}

fun deleteTaskInteractive() {
    val task = findTaskByIdInteractive() ?: return
    println("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '${task.title}'? (y/N)")
    val confirm = readLine()?.trim()?.lowercase(Locale.getDefault())
    if (confirm == "y" || confirm == "–¥" || confirm == "yes") {
        tasks.removeIf { it.id == task.id }
        println("${COLOR_GREEN}–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞${COLOR_RESET}")
    } else {
        println("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    }
}

fun searchTasksInteractive() {
    println("\n–ü–æ–∏—Å–∫:")
    println("1. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    println("2. –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é")
    println("3. –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    println("4. –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É")
    println("5. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    val choice = readIntInRange("–í–∞—à –≤—ã–±–æ—Ä (1-5): ", 1..5) ?: return
    val result: List<Task> = when (choice) {
        1 -> {
            val q = prompt("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è: ").lowercase(Locale.getDefault())
            tasks.filter { it.title.lowercase(Locale.getDefault()).contains(q) }
        }
        2 -> {
            val q = prompt("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è: ").lowercase(Locale.getDefault())
            tasks.filter { it.description.lowercase(Locale.getDefault()).contains(q) }
        }
        3 -> {
            val cat = chooseFromList("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", categories) ?: return
            tasks.filter { it.category == cat }
        }
        4 -> {
            val pri = chooseFromList("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", priorityOptions) ?: return
            tasks.filter { it.priority == pri }
        }
        else -> tasks.filter { overdue(it) }
    }
    if (result.isEmpty()) {
        println("üì≠ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    } else {
        result.forEachIndexed { index, task -> printTask(task, index + 1) }
    }
}

fun statsInteractive() {
    val total = tasks.size
    val completed = tasks.count { it.isCompleted }
    val active = total - completed
    val overdueCount = tasks.count { overdue(it) }
    val percent = if (total == 0) 0 else (completed * 100 / total)

    printHeader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    println("–í—Å–µ–≥–æ –∑–∞–¥–∞—á: $total")
    println("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: $completed")
    println("–ê–∫—Ç–∏–≤–Ω–æ: $active")
    println("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $overdueCount")
    println("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $percent%")

    println("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
    priorityOptions.forEach { p ->
        val count = tasks.count { it.priority == p }
        println("- $p: $count")
    }

    println("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    (categories.ifEmpty { defaultCategories }).forEach { c ->
        val count = tasks.count { it.category == c }
        println("- $c: $count")
    }
}


fun showMenu() {
    println("\n=================================================")
    println("–°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò")
    println("=================================================")
    println("üóÇ  1  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
    println("‚ûï  2  –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    println("‚úÖ  3  –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
    println("‚úèÔ∏è  4  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
    println("üóë  5  –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    println("üîé  6  –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á / –§–∏–ª—å—Ç—Ä—ã")
    println("üìä  7  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    println("‚ùå  0  –í—ã—Ö–æ–¥")
    println("-------------------------------------------------")
}

fun main() {
    while (true) {
        showMenu()
        val action = prompt("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ").toIntOrNull()
        when (action) {
            1 -> { listTasksInteractive(); pressEnterToContinue() }
            2 -> { createTaskInteractive(); pressEnterToContinue() }
            3 -> { markCompletedInteractive(); pressEnterToContinue() }
            4 -> { editTaskInteractive(); pressEnterToContinue() }
            5 -> { deleteTaskInteractive(); pressEnterToContinue() }
            6 -> { searchTasksInteractive(); pressEnterToContinue() }
            7 -> { statsInteractive(); pressEnterToContinue() }
            0 -> return
            else -> println("${COLOR_RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 0-7.${COLOR_RESET}")
        }
    }
}
